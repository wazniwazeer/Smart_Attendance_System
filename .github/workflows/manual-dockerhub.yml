name: CI Build & Push (GHCR)

on:
  push:
    branches: [ main ]
    tags: [ "v*" ]
  pull_request:

env:
  DOCKER_BUILDKIT: "1"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write   # required to push to GHCR
    steps:
      - name: Checkout (with LFS for big model files)
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up QEMU (optional for multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute image name (lowercase) and tags
        id: vars
        shell: bash
        run: |
          IMAGE="ghcr.io/${GITHUB_REPOSITORY}/face-attendance"
          echo "image=$(echo $IMAGE | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          if [[ "${GITHUB_REF}" == refs/heads/main ]]; then echo "latest=latest" >> $GITHUB_OUTPUT; fi
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then echo "release=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT; fi

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build only for PRs (no push)
      - name: Build (PR)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ steps.vars.outputs.image }}:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build & push on main/tags
      - name: Build & Push (main/tags)
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.vars.outputs.image }}:${{ steps.vars.outputs.sha }}
            ${{ steps.vars.outputs.image }}:${{ steps.vars.outputs.latest }}
            ${{ steps.vars.outputs.image }}:${{ steps.vars.outputs.release }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Optional: quick health check if model file is present
      - name: Smoke test container (if artifacts exist)
        if: github.event_name != 'pull_request' && hashFiles('artifacts/head_best.pth') != ''
        run: |
          docker run -d --rm -p 5000:5000 \
            -v "$PWD/artifacts:/app/artifacts" \
            --name face_test ${{ steps.vars.outputs.image }}:${{ steps.vars.outputs.sha }}
          for i in {1..30}; do curl -fsS http://localhost:5000/health && break || sleep 2; done
          curl -fsS http://localhost:5000/health
          docker stop face_test
